/*
 * This file is part of the EcoLearnia platform.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * EcoLearnia v0.0.1
 *
 * @fileoverview
 *  This file includes the definition of TemplateContainerComponent class.
 *
 * @author Young Suk Ahn Park
 * @date 10/21/15
 */
var React = require('react');
import EliReactComponent from '../../core/elireactcomponent';

const ID_PREFIX = 'elio_';

/**
 * @class TemplateContainerComponent
 *
 * @module interactives/components
 *
 * @classdesc
 *  React based component that represents a container component.
 *  Container component is a component that is composed of several other
 *  components.
 *  This particular implementation uses template where {{ <object.id> }} is
 *  replaced by the respective component or model value.
 *
 * @todo - Do validation/sanitization of the HTML tags in the template string.
 */
export default class TemplateContainerComponent extends EliReactComponent
{

    constructor(props)
    {
        super(props);

        /**
         * Map of key -> ELI object,
         * where keys are unique key generated by parseTemplate and ELI object is
         * the FQN of the object which could be a object in model or a component.
         *
         * Example:
         * {
         *   'elio_1': '.model.question.prompt',
         *   'elio_2': '.component.mvquestion'
         * }
         * @type {Object.<string, object>}
         */
        this.elios_ = {};

        this.childComponentEls_ = [];

    }

    /***** React methods *****/
    componentDidMount()
    {
        // @todo - For some reason the subscription to change causes warning
        //         about doing forceUpdate without being rendered.
        //super.componentDidMount();
        this.renderChildren_();
    }

    componentWillUnmount () {
        // @todo - should anything happen here?
        super.componentWillUnmount();

        for (let i=0; i < this.childComponentEls_.length; i++) {
            this.props.context.item.unmount(this.childComponentEls_[i]);
        }
    }

    render()
    {
        this.renderChildren_();
        return (
            <div ref="templateBody" dangerouslySetInnerHTML={this.createMarkup()} />
            )
    }

    /***** React methods *****/

    renderChildren_()
    {
        // For each of the placeholders (divs with data-hook)
        // Inject the object from the itemContext
        for (var key in this.elios_) {
            var objectFqn = this.elios_[key];
            var objectEl = this.queryByHook(key);
            var object = this.props.context.item.resolveObject(objectFqn);

            if (object.type && object.type.prototype) {
                // is a component, render it in the el
                // @todo - Consider checking for object.type.prototype.componentType
                this.childComponentEls_.push(objectEl);
                this.props.context.item.renderComponent(object, objectEl);
            } else {
                // @todo - Is is OK to just set the textContext with stringified object?
                objectEl.textContent = object.toString();
            }
        }
    }

    /**
     * Returns the DOM element that matches the data-hook attribute query
     */
    queryByHook(hook)
    {
        var el = this.refs.templateBody;
        return el.querySelector('[data-hook~="' + hook + '"]');
    }

    /**
     * Create markup based on the template
     */
    createMarkup() {
        var templateMarkup = this.parseTemplate(this.props.context.getConfigVal('template'));
        return {__html: templateMarkup};
    }

    /**
     * Parses a XHTML based template and converts {{placeholder-name}}
     * into  <div data-hook="<placeholder-name>"></div>
     */
    parseTemplate (templateStr)
    {
        var re = new RegExp('{{\\s*[\\w.]*\\s*}}', 'g');

        var template = []; // Template broken into patterns

        var cursor = 0;
        var idx = 0;

        var match;
        while ((match = re.exec(templateStr)) != null) {
            idx++;
            if (cursor != match.index) {
                // Append the substring that is not part of the match
                template.push(templateStr.substring(cursor, match.index));
            }
            // Replace the matching pattern with a markup
            var elioId = ID_PREFIX + idx.toString();
            template.push('<div data-hook="' + elioId + '"></div>');
            // move forward the cursor to the tail of the matched pattern
            cursor = match.index + match[0].length;
            // index the pattern without the '{{' and '}}', and trim it
            this.elios_[elioId] = match[0].substring(2, match[0].length - 2).trim();
            //console.log("match " + match[0] + " found at " +   match.index);
        }
        // Append the rest of the text
        template.push(templateStr.substring(cursor));

        return template.join('');
    }
}
